#ác Hàm Toán Học Phổ Biến Trong Python
# Trong Python, có nhiều hàm toán học phổ biến mà bạn có thể sử dụng để thực hiện các phép toán khác nhau.
# Dưới đây là một số hàm toán học phổ biến trong Python:

# 1. Hàm abs(): Trả về giá trị tuyệt đối của một số.
# abs(-5) # Kết quả: 5
# abs(3.14) # Kết quả: 3.14

# 2. Hàm round(): Làm tròn một số đến số chữ số thập phân nhất định.
# round(3.14159, 2) # Kết quả: 3.14
# round(2.71828) # Kết quả: 3

# 3. Hàm pow(): Tính lũy thừa của một số.
# pow(2, 3) # Kết quả: 8 (2^3)
# pow(3, 2) # Kết quả: 9 (3^2)

# 4. Hàm min() và max(): Tìm giá trị nhỏ nhất và lớn nhất trong một danh sách hoặc giữa nhiều số.
# min(1, 2, 3) # Kết quả: 1
# max(1, 2, 3) # Kết quả: 3
# min([1, 2, 3]) # Kết quả: 1
# max([1, 2, 3]) # Kết quả: 3

# 5. Hàm sum(): Tính tổng các phần tử trong một danh sách.
# sum([1, 2, 3]) # Kết quả: 6
# sum([1, 2, 3], 10) # Kết quả: 16 (tổng cộng thêm 10)

# 6. Hàm len(): Trả về độ dài của một chuỗi hoặc danh sách.
# len("Hello") # Kết quả: 5
# len([1, 2, 3]) # Kết quả: 3

# 7. Hàm sorted(): Sắp xếp một danh sách theo thứ tự tăng dần hoặc giảm dần.
# sorted([3, 1, 2]) # Kết quả: [1, 2, 3]
# sorted([3, 1, 2], reverse=True) # Kết quả: [3, 2, 1]

# 8. Hàm all() và any(): Kiểm tra xem tất cả hoặc bất kỳ phần tử nào trong một danh sách có đúng hay không.
# all([True, True, False]) # Kết quả: False
# any([True, False, False]) # Kết quả: True

# 9. Hàm zip(): Kết hợp các danh sách thành một danh sách các tuple.
# list1 = [1, 2, 3]
# list2 = ['a', 'b', 'c']
# zipped = zip(list1, list2) # Kết quả: [(1, 'a'), (2, 'b'), (3, 'c')]

# 10. Hàm map(): Áp dụng một hàm cho từng phần tử trong một danh sách.
# def square(x):
#     return x ** 2
# numbers = [1, 2, 3]
# squared_numbers = list(map(square, numbers)) # Kết quả: [1, 4, 9]
# squared_numbers = list(map(lambda x: x ** 2, numbers)) # Kết quả: [1, 4, 9]

# 11. Hàm filter(): Lọc các phần tử trong một danh sách theo một điều kiện.
# def is_even(x):
#     return x % 2 == 0
# numbers = [1, 2, 3, 4, 5]
# even_numbers = list(filter(is_even, numbers)) # Kết quả: [2, 4]
# even_numbers = list(filter(lambda x: x % 2 == 0, numbers)) # Kết quả: [2, 4]

# 12. Hàm reduce(): Giảm một danh sách thành một giá trị duy nhất bằng cách áp dụng một hàm.
# from functools import reduce
# def add(x, y):
#     return x + y
# numbers = [1, 2, 3, 4]
# sum_result = reduce(add, numbers) # Kết quả: 10
# sum_result = reduce(lambda x, y: x + y, numbers) # Kết quả: 10

# 13. Hàm all() và any(): Kiểm tra xem tất cả hoặc bất kỳ phần tử nào trong một danh sách có đúng hay không.
# all([True, True, False]) # Kết quả: False
# any([True, False, False]) # Kết quả: True

# 14. Hàm enumerate(): Tạo một danh sách các tuple chứa chỉ số và giá trị của các phần tử trong một danh sách.
# list1 = ['a', 'b', 'c']
# enumerated_list = list(enumerate(list1)) # Kết quả: [(0, 'a'), (1, 'b'), (2, 'c')]
# enumerated_list = list(enumerate(list1, start=1)) # Kết quả: [(1, 'a'), (2, 'b'), (3, 'c')]

# 15. Hàm reversed(): Đảo ngược một danh sách hoặc chuỗi.
# list1 = [1, 2, 3]
# reversed_list = list(reversed(list1)) # Kết quả: [3, 2, 1]
# reversed_string = ''.join(reversed("Hello")) # Kết quả: "olleH"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































